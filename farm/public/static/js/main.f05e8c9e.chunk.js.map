{"version":3,"sources":["components/Add/Add.jsx","components/Edit/Edit.jsx","App.js","serviceWorker.js","index.js"],"names":["Add","props","today","Date","toISOString","substr","className","onSubmit","e","preventDefault","Id","target","value","Mother","Father","DateOfBirth","Gender","fetch","method","body","JSON","stringify","headers","then","res","json","data","console","log","type","name","defaultValue","Edit","useState","showEdit","setShowEdit","item","setItem","ID","mother","father","dateOfBirth","gender","length","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iQAwDeA,MAjDf,SAAaC,GA+BT,IAAMC,GAAQ,IAAIC,MAAOC,cAAcC,OAAO,EAAG,IACjD,OACI,yBAAKC,WAAS,GACV,mCACA,0BAAMC,SAvBd,SAAsBC,GAElBA,EAAEC,iBAEF,IAAMC,EAAKF,EAAEG,OAAOD,GAAGE,MACjBC,EAASL,EAAEG,OAAOE,OAAOD,MACzBE,EAASN,EAAEG,OAAOG,OAAOF,MACzBG,EAAcP,EAAEG,OAAOI,YAAYH,MACnCI,EAASR,EAAEG,OAAOK,OAAOJ,MAC/BK,MAAM,OAAQ,CACVC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEX,KAAIG,SAAQC,SAAQC,cAAaC,WACxDM,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAG,GAAI,OAAIC,QAAQC,IAAIF,QAO1B,QACa,2BAAOG,KAAK,SAASC,KAAK,OADvC,IAC+C,6BAD/C,WAEgB,2BAAOD,KAAK,SAASC,KAAK,WAAW,6BAFrD,WAGgB,2BAAOD,KAAK,SAASC,KAAK,WAAW,6BAHrD,kBAIuB,2BAAOD,KAAK,OAAOC,KAAK,cAAcC,aAAc7B,IAAS,6BAJpF,WAKgB,2BAAO2B,KAAK,OAAOC,KAAK,WAAW,6BAC3C,2BAAOD,KAAK,SAASjB,MAAM,SAASN,UAAU,c,aCoDnD0B,MA7Ff,SAAc/B,GAAQ,IAAD,EAEegC,oBAAS,GAFxB,mBAEVC,EAFU,KAEAC,EAFA,OAGOF,mBAAS,IAHhB,mBAGVG,EAHU,KAGJC,EAHI,KAwDjB,OACI,6BAEI,oCACCH,EACG,6BACI,0BAAM3B,SAzDtB,SAAsBC,GAElBA,EAAEC,iBAEF,IAAMC,EAAKF,EAAEG,OAAOD,GAAGE,MACjBC,EAASL,EAAEG,OAAOE,OAAOD,MACzBE,EAASN,EAAEG,OAAOG,OAAOF,MACzBG,EAAcP,EAAEG,OAAOI,YAAYH,MACnCI,EAASR,EAAEG,OAAOK,OAAOJ,MAE/BK,MAAM,QAAS,CACXC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEX,KAAIG,SAAQC,SAAQC,cAAaC,WACxDM,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZS,GAAY,QAuCJ,sCACQ,2BAAON,KAAK,SAASC,KAAK,KAAKlB,MAAOwB,EAAKE,KADnD,IAC0D,6BAD1D,WAEY,2BAAOT,KAAK,SAASC,KAAK,SAASC,aAAcK,EAAKG,SAAU,6BAF5E,WAGY,2BAAOV,KAAK,SAASC,KAAK,SAASC,aAAcK,EAAKI,SAAU,6BAH5E,kBAImB,2BAAOX,KAAK,OAAOC,KAAK,cAAcC,aAAcK,EAAKK,cAAe,6BAJ3F,WAKY,2BAAOZ,KAAK,OAAOC,KAAK,SAASC,aAAcK,EAAKM,SAAU,6BACtE,2BAAOb,KAAK,SAASjB,MAAM,cAKvC,6BACI,0BAAML,SA/CtB,SAAoBC,GAChBA,EAAEC,iBACF,IAAMC,EAAKF,EAAEG,OAAOD,GAAGE,MACvBe,QAAQC,IAAIlB,GACZO,MAAM,iBAAkB,CACpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAAEX,OACvBY,QAAS,CACL,eAAgB,sBAErBC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UACdF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACTA,EAAKiB,OAAS,GACbN,EAAQX,EAAK,IACbC,QAAQC,IAAIF,EAAK,IACjBS,GAAY,IAGZR,QAAQC,IAAI,kBA6BR,sCACQ,2BAAOC,KAAK,SAASC,KAAK,OADlC,IACyC,6BACrC,2BAAOD,KAAK,SAASjB,MAAM,c,MC3DxCgC,MAnBf,WAEE,OACE,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,cAEb,yBAAKA,UAAU,WACb,kBAAC,EAAD,OAGF,yBAAKA,UAAU,YACb,kBAAC,EAAD,UCNUuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.f05e8c9e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react'\r\n\r\n\r\nimport \"./Add.css\"\r\n\r\nfunction Add(props) {\r\n\r\n    // let { data, setData } = props\r\n    // const [newData, setNewData] = useState({});\r\n\r\n    // useEffect(() => {\r\n    //     console.log(newData)\r\n    //     setData([...data, newData])\r\n    //     console.log(data)\r\n    // }, [newData])\r\n\r\n\r\n    function handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        const Id = e.target.Id.value\r\n        const Mother = e.target.Mother.value\r\n        const Father = e.target.Father.value\r\n        const DateOfBirth = e.target.DateOfBirth.value\r\n        const Gender = e.target.Gender.value\r\n        fetch('/add', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ Id, Mother, Father, DateOfBirth, Gender }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => console.log(data))\r\n\r\n    }\r\n    const today = new Date().toISOString().substr(0, 10);;\r\n    return (\r\n        <div className>\r\n            <h1>ADD</h1>\r\n            <form onSubmit={handleSubmit}>\r\n                    ID:  <input type=\"number\" name=\"Id\" /> <br></br>\r\n                    Mother: <input type=\"number\" name=\"Mother\" /><br></br>\r\n                    Father: <input type=\"number\" name=\"Father\" /><br></br>\r\n                    Date Of Birth: <input type=\"date\" name=\"DateOfBirth\" defaultValue={today} /><br></br>\r\n                    Gender: <input type=\"text\" name=\"Gender\" /><br></br>\r\n                    <input type=\"submit\" value=\"Submit\" className=\"button\" />\r\n            </form>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Add;","import React from 'react'\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react'\r\n\r\n\r\nimport \"./Edit.css\"\r\n\r\nfunction Edit(props) {\r\n\r\n    const [showEdit, setShowEdit] = useState(false)\r\n    const [item, setItem] = useState({})\r\n\r\n    function handleSubmit(e) {\r\n\r\n        e.preventDefault();\r\n\r\n        const Id = e.target.Id.value\r\n        const Mother = e.target.Mother.value\r\n        const Father = e.target.Father.value\r\n        const DateOfBirth = e.target.DateOfBirth.value\r\n        const Gender = e.target.Gender.value\r\n\r\n        fetch('/edit', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ Id, Mother, Father, DateOfBirth, Gender }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => { \r\n                console.log(data)\r\n                setShowEdit(false)\r\n            })\r\n    }\r\n\r\n    function handleEdit(e) {\r\n        e.preventDefault();\r\n        const Id = e.target.Id.value\r\n        console.log(Id)\r\n        fetch('/getItemToEdit', {\r\n            method: \"POST\",\r\n            body: JSON.stringify({ Id }),\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            }\r\n        }).then(res => res.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                if(data.length > 0){\r\n                    setItem(data[0])\r\n                    console.log(data[0])\r\n                    setShowEdit(true)\r\n                }\r\n                else{\r\n                    console.log(\"NOT FOUND\")\r\n                }\r\n            })\r\n\r\n        \r\n        \r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <h1>EDIT</h1>\r\n            {showEdit ?\r\n                <div>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <label>\r\n                            ID: <input type=\"number\" name=\"Id\" value={item.ID} /> <br></br>\r\n                            Mother: <input type=\"number\" name=\"Mother\" defaultValue={item.mother} /><br></br>\r\n                            Father: <input type=\"number\" name=\"Father\" defaultValue={item.father} /><br></br>\r\n                            Date Of Birth: <input type=\"date\" name=\"DateOfBirth\" defaultValue={item.dateOfBirth} /><br></br>\r\n                            Gender: <input type=\"text\" name=\"Gender\" defaultValue={item.gender} /><br></br>\r\n                            <input type=\"submit\" value=\"Submit\"/>\r\n                        </label>\r\n                    </form >\r\n                </div >\r\n                :\r\n                <div>\r\n                    <form onSubmit={handleEdit}>\r\n                        <label>\r\n                            ID: <input type=\"number\" name=\"Id\"/> <br></br>\r\n                            <input type=\"submit\" value=\"Edit\" />\r\n                        </label>\r\n\r\n                    </form >\r\n                </div>\r\n            }\r\n\r\n\r\n\r\n        </div >\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Edit;","import React, { useState } from 'react';\nimport Add from '../src/components/Add/Add';\nimport Edit from '../src/components/Edit/Edit'\nimport './App.css';\n\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-header\">\n\n        <div className=\"addComp\">\n          <Add></Add>\n        </div>\n\n        <div className=\"editComp\">\n          <Edit></Edit>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}